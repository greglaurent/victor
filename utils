#!/usr/bin/env bash

# Arguments
INT=""
CMD=""
SUB=""
SCP=""
ARG=""

declare -A arg_map

utils::bootstrap() {
  unset INT
  unset CMD
  unset SUB
  unset SCP
  unset ARG

  echo "[MSG] VICTOR is running: ${HERE}"

  [[ ! -L "/usr/local/bin/vic" ]] &&
    {
      ln -s "${HERE}/vic" /usr/local/bin/vic >&2 || {
        printf '\n%s\n' "[WRN]: Invalid persmissions. Run with sudo to symlink as a bin."
      }
    }

  utils::git

  utils::path::arg_map

  #_base_tools

  # utils::print_lookup
}

_base_tools() {
  local here="${HERE}"
  local dir="${here}/repos"

  [[ ! -d "${dir}"/ini-file-parser ]] &&
    git clone git@github.com:greglaurent/ini-file-parser.git "${dir}/ini-file-parser"

  source ${dir}/ini-file-parser/src/ini-file-parser.sh
}

utils::is_cmd() {
  local cmd=$(command -v "${1}") 2>&1 >/dev/null

  [[ ! -z ${cmd} ]] && return 0

  return 1
}

utils::is_root() {
  if [ "$(id -u)" -ne 0 ]; then
    printf '[ERR] This command must be run as root.' >&2
    exit 1
  fi
}

utils::user_home() {
  # $HOME for any user
  # TODO: update to take a variable
  echo "$(getent passwd "${USER}" | cut -d: -f6)"
}

utils::git() {
  is_installed=$(pacman -Qi git)
  mkdir -p "${HERE}/repos" >&2

  [[ ! "${is_installed}" ]] && {
    printf '\n%s' "[WRN] Bootstrap requires git."
    printf '\n%s' "[ACT] Pacman installing now."

    pacman -Syy git

    printf '\n\n%s' "[MSG] Git installed."
  }
}

utils::parse_args() {
  local skip=false
  while (("$#")); do
    # identical match should be an internal cmd, honor left -> right
    # skip if first command is not internal
    if ! "${skip}"; then
      [[ -n "${arg_map["${1}"]}" ]] && {
        INT="${1}"
        shift
        [[ -z $ARG ]] && ARG="${@}"
        break
      }
    fi

    # jump to processing external commands
    skip=true

    # skip SCP and shift ARG, if only CMD SUB ARG
    [[ -z $CMD ]] && CMD="${1}" && shift && continue
    [[ -z $SUB ]] && SUB="${1}" && shift && continue
    [[ -z $SCP ]] && [[ "${#}" > 1 ]] && SCP="${1}" && shift && continue
    [[ -z $ARG ]] && ARG="${@}" && shift && break
  done
}

utils::exec() {
  local here="${HERE}"
  local -n ref_arg_map="arg_map"

  utils::parse_args "$@"

  # debug args
  # echo "0 : ${INT}"
  # echo "1 : ${CMD}"
  # echo "2 : ${SUB}"
  # echo "3 : ${SCP}"
  # echo "4 : ${ARG}"

  local path ref_dir ref_cmd

  # override if an internal command
  [[ ! -z "${INT}" ]] &&
    {
      path="${arg_map["${INT}"]}"
      #source "${path}" >&1
      #"${INT}::exec" "${ARG}" >&1
      # exit
    } || {
    path="${arg_map["${CMD}", "${SUB}"]}"

    # shift variables
    # if passed as `dir cmd arg` instead of `dir:cmd arg`
    [[ -z "${path}" ]] && {
      ref_dir="${CMD}:${SUB}"
      ref_cmd="${SCP}"
      path="${arg_map["${ref_dir}", "${ref_cmd:-$ARG}"]}"
    }
  }

  printf '\n%s\n' "[RUN] "${path}"" >&2

  [[ ! -z "${ARG}" ]] &&
    printf '%s\n\n' "[ARG] "${ARG}"" >&2 ||
    printf "\n" >&2

  #"${path}" "${ARG}" >&1
  source "${path}" >&1
}

utils::path::arg_map() {
  local here="${HERE}"
  local -a out_d
  local -a out_f

  # skip hidden directories
  mapfile -t out_d < <(find "${here}" -maxdepth 2 -mindepth 1 -not -path '*/.*' -type d -printf '%P\n')

  local path
  for d in "${out_d[@]}"; do
    path="${here}/${d}"
    mapfile -t out_f < <(find "${path}" -maxdepth 1 -mindepth 1 -executable -type f)

    local key_1=$(echo "${d}" | sed -r 's/\//:/g')
    for f in "${out_f[@]}"; do
      local key_2=$(basename "${f}")
      arg_map["${key_1}", "${key_2}"]="${f}"
    done
  done

  # map internal commands
  path="${here}/.internal"
  mapfile -t out_f < <(find "${path}" -maxdepth 1 -mindepth 1 -executable -type f)
  for f in "${out_f[@]}"; do
    local key_1=$(basename "${f}")
    arg_map["${key_1}"]="${f}"
  done
}

utils::print_lookup() {
  local -n ref="arg_map"

  printf '\n%s' "######## ARGUMENT MAP ########" >&2
  printf '\n%s\n' "______________________________" >&2
  for d in "${!ref[@]}"; do
    printf '\n[KEY] %s' "${d}" >&2
    printf '\n[VAL] %s\n' "${ref["${d}"]}" >&2
  done
}
